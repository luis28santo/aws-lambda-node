{
  "service": {
    "service": "aws-lambda-node",
    "serviceObject": {
      "name": "aws-lambda-node"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-2",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:*"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:490289454599:table/charactersTable"
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-node-dev-api"
            }
          },
          "CreateCharacterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-node-dev-createCharacter"
            }
          },
          "GetCharactersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-node-dev-getCharacters"
            }
          },
          "GetSWCharactersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/aws-lambda-node-dev-getSWCharacters"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "aws-lambda-node",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-node-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-node-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Deny",
                        "Action": "logs:PutLogEvents",
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-node-dev-swagger-ui:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/aws-lambda-node-dev-swagger-json:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "aws-lambda-node",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "src/index.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "CreateCharacterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "src/routes/character/createCharacter.createCharacter",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-createCharacter",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateCharacterLogGroup"
            ]
          },
          "GetCharactersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "src/routes/character/getCharacters.getCharacters",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-getCharacters",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetCharactersLogGroup"
            ]
          },
          "GetSWCharactersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "src/routes/swapi/getSWCharacters.getSWCharacters",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-getSWCharacters",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetSWCharactersLogGroup"
            ]
          },
          "SwaggerUILambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "swagger/swagger-html.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-swagger-ui",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "SwaggerJSONLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z/aws-lambda-node.zip"
              },
              "Handler": "swagger/swagger-json.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "aws-lambda-node-dev-swagger-json",
              "MemorySize": 1024,
              "Timeout": 6,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            }
          },
          "ApiLambdaVersionmwmQJaOC7H60z4l8VWyq81ZhE0g3Ulhf4kt0VA9bqM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "CreateCharacterLambdaVersionO9FL4uq7gaicQY927uDXwUAoCjtiNFLlkVcpypaw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateCharacterLambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "GetCharactersLambdaVersionZ3jrlyEYS6I51knfR43DJUnmfwD77bQvfCn7weXE8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetCharactersLambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "GetSWCharactersLambdaVersion5QylxW1WLch2DwUGUSVO2LwWswQMywYQ9iyryAIsXU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetSWCharactersLambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "SwaggerUILambdaVersionleeQ69aapzVx3vqJMIQv8tI3vrpQlQCKWeiBAl5QA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerUILambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "SwaggerJSONLambdaVersionENk0PX71KLzgHKrl3ZYU1RQqp0eC6ssiuMauyo3vTc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SwaggerJSONLambdaFunction"
              },
              "CodeSha256": "NN7mSqi24XRPdQlnT8dQ39o4c4xKiFAggnt3uPwkClQ="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-aws-lambda-node",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "ApiLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationApi": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGet": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationApi"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationApi"
          },
          "CreateCharacterLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateCharacterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateCharacter": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateCharacterLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostCharacter": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /character",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateCharacter"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateCharacter"
          },
          "GetCharactersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetCharactersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetCharacters": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetCharactersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetCharacter": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /character",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetCharacters"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetCharacters"
          },
          "GetSWCharactersLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetSWCharactersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetSWCharacters": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetSWCharactersLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSwCharacter": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /sw/character",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetSWCharacters"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetSWCharacters"
          },
          "SwaggerUILambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerUILambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSwaggerUI": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SwaggerUILambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSwagger": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /swagger",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwaggerUI"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwaggerUI"
          },
          "SwaggerJSONLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SwaggerJSONLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationSwaggerJSON": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SwaggerJSONLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetSwaggerjson": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /swagger.json",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationSwaggerJSON"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationSwaggerJSON"
          },
          "charactersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "charactersTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionmwmQJaOC7H60z4l8VWyq81ZhE0g3Ulhf4kt0VA9bqM"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "CreateCharacterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateCharacterLambdaVersionO9FL4uq7gaicQY927uDXwUAoCjtiNFLlkVcpypaw"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-CreateCharacterLambdaFunctionQualifiedArn"
            }
          },
          "GetCharactersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetCharactersLambdaVersionZ3jrlyEYS6I51knfR43DJUnmfwD77bQvfCn7weXE8"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-GetCharactersLambdaFunctionQualifiedArn"
            }
          },
          "GetSWCharactersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetSWCharactersLambdaVersion5QylxW1WLch2DwUGUSVO2LwWswQMywYQ9iyryAIsXU"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-GetSWCharactersLambdaFunctionQualifiedArn"
            }
          },
          "SwaggerUILambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerUILambdaVersionleeQ69aapzVx3vqJMIQv8tI3vrpQlQCKWeiBAl5QA"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-SwaggerUILambdaFunctionQualifiedArn"
            }
          },
          "SwaggerJSONLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SwaggerJSONLambdaVersionENk0PX71KLzgHKrl3ZYU1RQqp0eC6ssiuMauyo3vTc"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-SwaggerJSONLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-aws-lambda-node-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "esbuild": {
        "bundle": true,
        "minify": false,
        "exclude": []
      },
      "autoswagger": {
        "title": "AWS-SERVERLESS-NODE",
        "apiType": "httpApi",
        "description": "Lambdas de aws para pasar la prueba"
      }
    },
    "plugins": [
      "serverless-auto-swagger",
      "serverless-esbuild",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "src/index.handler",
        "events": [
          {
            "httpApi": {
              "path": "/",
              "method": "get",
              "description": "Api base",
              "responseData": {
                "200": {
                  "description": "this went well"
                }
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/"
          }
        ],
        "name": "aws-lambda-node-dev-api",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionmwmQJaOC7H60z4l8VWyq81ZhE0g3Ulhf4kt0VA9bqM"
      },
      "createCharacter": {
        "handler": "src/routes/character/createCharacter.createCharacter",
        "events": [
          {
            "httpApi": {
              "path": "/character",
              "method": "post",
              "swaggerTags": [
                "characterDynamoDB"
              ],
              "bodyType": "CharacterRequest",
              "responseData": {
                "200": {
                  "description": "Se creo correctamente el personaje en BD.",
                  "bodyType": "CharacterResp"
                },
                "400": {
                  "description": "El body es nulo."
                }
              }
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/character"
          }
        ],
        "name": "aws-lambda-node-dev-createCharacter",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateCharacterLambdaVersionO9FL4uq7gaicQY927uDXwUAoCjtiNFLlkVcpypaw"
      },
      "getCharacters": {
        "handler": "src/routes/character/getCharacters.getCharacters",
        "events": [
          {
            "httpApi": {
              "path": "/character",
              "method": "get",
              "swaggerTags": [
                "characterDynamoDB"
              ],
              "responseData": {
                "200": {
                  "description": "Se obtienen correctamente todos los personajes de BD.",
                  "bodyType": "CharacterResp"
                }
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/character"
          }
        ],
        "name": "aws-lambda-node-dev-getCharacters",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetCharactersLambdaVersionZ3jrlyEYS6I51knfR43DJUnmfwD77bQvfCn7weXE8"
      },
      "getSWCharacters": {
        "handler": "src/routes/swapi/getSWCharacters.getSWCharacters",
        "events": [
          {
            "httpApi": {
              "path": "/sw/character",
              "method": "get",
              "swaggerTags": [
                "swapi"
              ],
              "queryStringParameters": {
                "name": {
                  "required": false,
                  "type": "string",
                  "description": "Se puede probar con el nombre de 'Sky'"
                }
              },
              "responseData": {
                "200": {
                  "description": "Nos traemos todos los personajes de la api 'https://swapi.py4e.com/api/people/' o 'https://swapi.py4e.com/api/people/?search=XXXXXXXX'.",
                  "bodyType": "CharacterFullEsp"
                }
              }
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/sw/character"
          }
        ],
        "name": "aws-lambda-node-dev-getSWCharacters",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetSWCharactersLambdaVersion5QylxW1WLch2DwUGUSVO2LwWswQMywYQ9iyryAIsXU"
      },
      "swaggerUI": {
        "name": "aws-lambda-node-dev-swagger-ui",
        "handler": "swagger/swagger-html.handler",
        "disableLogs": true,
        "events": [
          {
            "httpApi": {
              "method": "get",
              "path": "/swagger"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/swagger"
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SwaggerUILambdaVersionleeQ69aapzVx3vqJMIQv8tI3vrpQlQCKWeiBAl5QA"
      },
      "swaggerJSON": {
        "name": "aws-lambda-node-dev-swagger-json",
        "handler": "swagger/swagger-json.handler",
        "disableLogs": true,
        "events": [
          {
            "httpApi": {
              "method": "get",
              "path": "/swagger.json"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/swagger.json"
          }
        ],
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SwaggerJSONLambdaVersionENk0PX71KLzgHKrl3ZYU1RQqp0eC6ssiuMauyo3vTc"
      }
    },
    "resources": {
      "Resources": {
        "charactersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "charactersTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "aws-lambda-node",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "api": {
          "$ref": "$[\"service\"][\"functions\"][\"api\"]"
        },
        "createCharacter": {
          "$ref": "$[\"service\"][\"functions\"][\"createCharacter\"]"
        },
        "getCharacters": {
          "$ref": "$[\"service\"][\"functions\"][\"getCharacters\"]"
        },
        "getSWCharacters": {
          "$ref": "$[\"service\"][\"functions\"][\"getSWCharacters\"]"
        }
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/aws-lambda-node/dev/1712285658947-2024-04-05T02:54:18.947Z",
    "artifact": "aws-lambda-node.zip"
  }
}